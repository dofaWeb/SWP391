@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@model SWP391_FinalProject.Models.ProductModel;
@Html.AntiForgeryToken()
<style>
    .option-box {
        border: 2px solid #007bff;
        padding: 10px;
        text-align: center;
        cursor: pointer;
        border-radius: 5px;
        margin: 5px;
        transition: background-color 0.3s;
        flex: 1; /* Allow the boxes to grow */
        min-width: 80px; /* Minimum width for the boxes */
    }

        .option-box:hover {
            background-color: #e9ecef;
        }

    .selected {
        background-color: #007bff;
        color: white;
    }

    .related-product {
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 10px;
        text-align: center;
    }

    .rating {
        color: gold;
    }

    .star {
        font-size: 24px;
        cursor: pointer;
        color: lightgray;
    }

        .star.selected {
            color: gold;
        }

    .reply {
        display: flex;
        align-items: flex-start;
        margin-left: 20px; /* Increase indent for replies */
    }

    .reply-arrow {
        margin-right: 10px; /* Space between arrow and reply content */
        font-size: 18px; /* Make the arrow a bit larger */
        color: #007bff; /* Optional: change arrow color */
    }

    .reply-content {
        background-color: #f9f9f9; /* Optional: background for replies */
        border-radius: 5px;
        padding: 10px;
    }

</style>
@{var defaultOptionValue = "";}
<div class="container mt-4">
    <form asp-controller="Cart" asp-action="AddToCart">
        
        <div class="row">
            <div class="col-md-12 mb-3">
                <!-- Top-left position -->
                <a asp-action="Index" asp-controller="Pro" class="btn btn-secondary btn-sm">Back</a>
            </div>

            <!-- Product Image -->
            <div class="col-md-6">
                <img src="~/pictures/@Model.Picture" alt="Product Image" class="img-fluid">
            </div>

            <!-- Product Information -->
            <div class="col-md-6">
                <h2 class="mt-3">@Model.Name</h2>
                <h5 id="priceDisplay" class="text-muted">@String.Format("{0:N0}", @Model.MinPrice) VND</h5>

                <div class="form-group">
                    <label for="combined-options">Select Option:</label>
                    <div class="row">
                        @foreach (var option in ViewBag.Option)
                        {
                            bool isSelected = option.Key == Model.ProductItem.Id;
                            string selectedClass = option.Key == @Model.ProductItem.Id ? "selected" : "";
                            string optionValue = Html.Encode(option.Value);



                            if (isSelected)
                            {
                                defaultOptionValue = option.Value;
                            }


                            <div class="col-md-4 mb-2">
                                <div class="option-box text-center @selectedClass"
                                     data-type="combined"
                                     data-value="@option.Value"
                                     onclick="selectOption('combined', '@option.Value')">
                                    @Html.Raw(option.Value)
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <input id="CartOption" name="Option" value="@defaultOptionValue" type="hidden" />
                <input type="hidden" value="@Model.Id" name="ProductId" />
                <input class="btn btn-danger btn-sm" type="submit" value="AddToCart" id="addToCartButton" />
            </div>
        </div>
    </form>
</div>



<!-- Product Description -->
<div class="mt-4">
    <h3>Description</h3>
    <p>@Model.Description</p>
</div>

<!-- Product Rating -->
<h3>Rating</h3>
@if (User.Identity.IsAuthenticated)
{
    <div class="mt-4">
       
        <div class="rating-container">
            <span class="rating">
                <span class="star" data-value="0.5">&#9733;</span>
                <span class="star" data-value="1">&#9733;</span>
                <span class="star" data-value="1.5">&#9733;</span>
                <span class="star" data-value="2">&#9733;</span>
                <span class="star" data-value="2.5">&#9733;</span>
                <span class="star" data-value="3">&#9733;</span>
                <span class="star" data-value="3.5">&#9733;</span>
                <span class="star" data-value="4">&#9733;</span>
                <span class="star" data-value="4.5">&#9733;</span>
                <span class="star" data-value="5">&#9733;</span>
            </span>
            <span id="rating-value">5/5</span>
        </div>
    </div>
}
else
{
    <p>Please <a asp-controller="Acc" asp-action="Login">log in</a> to Rating a Product.</p>
}


<div class="mt-4">
    <h3>ShowRatingAVG</h3>
      <img src="@GetRatingImage(ViewBag.AverageRating)" alt="Rating" />  
   

    @functions {
        string GetRatingImage(double averageRating)
        {
            if (averageRating >= 5.0)
                return "/pictures/Rating5.0.jpeg";
            else if (averageRating >= 4.5)
                return "/pictures/Rating4.5.jpeg";
            else if (averageRating >= 4.0)
                return "/pictures/Rating4.0.jpeg";
            else if (averageRating >= 3.5)
                return "/pictures/Rating3.5.jpeg";
            else if (averageRating >= 3.0)
                return "/pictures/Rating3.0.jpeg";
            else if (averageRating >= 2.5)
                return "/pictures/Rating2.5.jpeg";
            else if (averageRating >= 2.0)
                return "/pictures/Rating2.0.jpeg";
            else if (averageRating >= 1.5)
                return "/pictures/Rating1.5.jpeg";
            else if (averageRating >= 1.0)
                return "/pictures/Rating1.0.jpeg";
            else if (averageRating >= 0.5)
                return "/pictures/Rating0.5.jpeg";
            else
                return "/pictures/Rating5.0.jpeg"; // Nếu bạn có ảnh cho rating 0, hoặc thay thế bằng ảnh mặc định.
        }
    }


</div>


<!-- Comments Section -->
<div class="mt-4">
    <h3>Comments</h3>
    @if (User.Identity.IsAuthenticated)
    {
        <form class="input-group mb-3" asp-controller="Com" asp-action="AddComment" method="post">
            <textarea class="form-control" name="Comment" rows="3" placeholder="Leave a comment..." aria-label="Leave a comment" required></textarea>

            <!-- Hidden fields for proId and userId -->
            <input type="hidden" name="ProductId" value="@Model.Id">
            <input type="hidden" name="Username" value="@User.FindFirst("Username")?.Value"> <!-- Assuming user ID is in claims -->

            <div class="input-group-append">
                <button class="btn btn-primary" type="submit">submit</button>
            </div>
        </form>
    }
    else
    {
        <p>Please <a asp-controller="Acc" asp-action="Login">log in</a> to submit a comment.</p>
    }
    <div class="mt-4">
        @if (ViewBag.Comments != null)
        {
            foreach (var comment in ViewBag.Comments)
            {

                <div class="comment" id="comment-@comment.Id">
                    <p><strong>@comment.FullName:</strong></p>

                    <!-- Comment text or textarea based on the edit mode -->
                    <div class="comment-content">
                        <span class="comment-text" id="comment-text-@comment.Id">@comment.Comment</span>
                        <textarea class="comment-edit" id="comment-edit-@comment.Id" style="display: none;">@comment.Comment</textarea>
                    </div>

                    <p><small>@comment.Date.ToString("g")</small></p>

                    <!-- Edit and Delete buttons only for the owner of the comment -->
                    @if (User.FindFirst("Username")?.Value == comment.UserName)
                    {
                        <div class="btn-group" role="group">
                            <button class="btn btn-warning btn-sm" onclick="editComment('@comment.Id')">Edit</button>
                            <button class="btn btn-danger btn-sm" onclick="deleteComment('@comment.Id')">Delete</button>
                        </div>
                        <button class="btn btn-success btn-sm" id="save-btn-@comment.Id" style="display: none;" onclick="saveComment('@comment.Id')">Save</button>
                    }
                    <hr />
                    @if (comment.Replies != null && comment.Replies.Count > 0)
                    {
                        <div class="replies">
                            @foreach (var reply in comment.Replies)
                            {
                                <div class="reply ml-4">
                                    <!-- Arrow to indicate reply -->
                                    <div class="reply-arrow">
                                        <span>&#x2192;</span> <!-- Unicode arrow symbol -->
                                    </div>
                                    <div class="reply-content">
                                        <p><strong>Admin:</strong> @reply.Comment</p>
                                        <p><small>@reply.Date.ToString("g")</small></p>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        }
    </div>
</div>

<!-- Related Products Section -->
<!-- Related Products Section -->

<div class="container">
    <h3 class="mt-5">Related Products</h3>
    <div class="row">
        @foreach (var item in ViewBag.RelatedProduct)
        {
            if (item.ProductState == "Available")
            {
                <div class="col-md-3 mb-4 h-100">
                    <div class="related-product text-center">
                        <a asp-controller="Pro" asp-action="ProductDetail" asp-route-id="@item.Id" asp-route-productItemId="@item.ProductItem.Id" asp-route-Price="@item.ProductItem.PriceAfterDiscount">
                            <div class="image-container">
                                <img src="~/pictures/@item.Picture" class="img-fluid" alt="@item.Name">
                            </div>
                        </a>
                        <h5>@item.Name</h5>
                        <div class="price">
                            @if (item.ProductItem.Discount != 0)
                            {
                                <span class="old-price text-muted text-decoration-line-through">@String.Format("{0:N0}", item.ProductItem.SellingPrice) VND</span>
                                <h4 class="new-price text-danger">@String.Format("{0:N0}", item.ProductItem.PriceAfterDiscount) VND</h4>
                                <span class="saving text-success">Saving: @String.Format("{0:N0}", item.ProductItem.Saving) VND</span>
                            }
                            else
                            {
                                <h4 class="new-price text-danger">@String.Format("{0:N0}", item.ProductItem.SellingPrice) VND</h4>
                            }
                        </div>
                        <button class="btn btn-success btn-sm">View</button>
                    </div>
                </div>
            }
        }

    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const stars = document.querySelectorAll('.star');
        const ratingValue = document.getElementById('rating-value');
        const productId = '@Model.Id'; // Use Razor to inject the correct product item ID dynamically.
        const username = '@User.FindFirst("Username")?.Value'; // Get the logged-in user's username from the Razor view.
        stars.forEach(star => {
            star.addEventListener('click', function () {
                const selectedValue = this.getAttribute('data-value');
                setSelectedStars(selectedValue);
                ratingValue.textContent = `(${selectedValue}/5)`; // Update the rating display

                // Call the function to send the rating
                sendRatingToController(selectedValue, username, productId);
            });
        });

        function setSelectedStars(value) {
            stars.forEach(star => {
                star.classList.remove('selected');
                if (parseFloat(star.getAttribute('data-value')) <= parseFloat(value)) {
                    star.classList.add('selected');
                }
            });
        }

        function sendRatingToController(value, username, productId) {
            fetch('/Pro/Rating', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || ''
                },
                body: JSON.stringify({ Rating: value, Username: username, ProductId: productId })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => console.log('Rating sent successfully:', data))
                .catch(error => console.error('Error sending rating:', error));
        }
    });

    function selectOption(type, value) {
        // Remove 'selected' class from the combined options
        document.querySelectorAll('.option-box[data-type="combined"]').forEach(function (el) {
            el.classList.remove('selected');
        });
        console.log(value);
        // Add 'selected' class to the clicked option
        document.querySelector(`.option-box[data-type="combined"][data-value="${value}"]`).classList.add('selected');

        // Set the selectedOption to the chosen RAM + Storage combination
        selectedOption = value;

        // Make an AJAX call to get the price if a valid option is selected
        if (selectedOption) {
            document.getElementById('CartOption').value = selectedOption; // Update a hidden input field with the selected option
            fetch(`/Pro/GetPrice?combinedOption=${encodeURIComponent(selectedOption)}&productId=@Model.Id`)
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                    if (data === 'Not available') {
                        document.getElementById('addToCartButton').disabled = true; // Disable the button
                    } else {
                        document.getElementById('addToCartButton').disabled = false; // Enable the button
                    }

                    const formattedPrice = parseFloat(data).toLocaleString('en-US') + ' VND';
                    document.getElementById('priceDisplay').textContent = formattedPrice;
                })
                .catch(error => {
                    console.error('Error fetching price:', error);
                    document.getElementById('priceDisplay').textContent = 'Error fetching price'; // Handle error
                    document.getElementById('addToCartButton').disabled = true; // Disable the button
                });
        }
    }

    function editComment(commentId) {
        // Hide the text and show the textarea
        document.getElementById(`comment-text-${commentId}`).style.display = 'none';
        document.getElementById(`comment-edit-${commentId}`).style.display = 'block';
        document.getElementById(`save-btn-${commentId}`).style.display = 'inline-block';
    }

    function saveComment(commentId) {
        // Get the updated comment text from the textarea
        const updatedComment = document.getElementById(`comment-edit-${commentId}`).value;

        // Perform an AJAX request to save the updated comment
        $.ajax({
            type: 'POST',
            url: '/Com/UpdateComment', // Replace with your update comment endpoint
            data: {
                id: commentId,
                comment: updatedComment
            },
            success: function () {
                // Update the comment text
                document.getElementById(`comment-text-${commentId}`).innerText = updatedComment;

                // Hide the textarea and show the updated text
                document.getElementById(`comment-text-${commentId}`).style.display = 'block';
                document.getElementById(`comment-edit-${commentId}`).style.display = 'none';
                document.getElementById(`save-btn-${commentId}`).style.display = 'none';
            },
            error: function () {
                alert('Error updating comment. Please try again.');
            }
        });
    }

    function deleteComment(commentId) {
        if (confirm('Are you sure you want to delete this comment?')) {
            // Perform AJAX request to delete the comment
            $.ajax({
                type: 'POST',
                url: '/Com/DeleteComment', // Replace with your delete comment endpoint
                data: { id: commentId },
                success: function () {
                    // Remove the comment element from the DOM
                    document.getElementById(`comment-${commentId}`).remove();
                },
                error: function () {
                    alert('Error deleting comment. Please try again.');
                }
            });
        }
    }
    

    
</script>