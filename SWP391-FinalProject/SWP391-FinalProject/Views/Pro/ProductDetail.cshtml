@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@model SWP391_FinalProject.Models.ProductModel

<style>
    .option-box {
        border: 2px solid #007bff;
        padding: 10px;
        text-align: center;
        cursor: pointer;
        border-radius: 5px;
        margin: 5px;
        transition: background-color 0.3s;
        flex: 1; /* Allow the boxes to grow */
        min-width: 80px; /* Minimum width for the boxes */
    }

        .option-box:hover {
            background-color: #e9ecef;
        }

    .selected {
        background-color: #007bff;
        color: white;
    }

    .related-product {
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 10px;
        text-align: center;
    }

    .rating {
        color: gold;
    }
</style>

<div class="container mt-4">
    <form asp-controller="Cart" asp-action="AddToCart">
        <div class="row">
            <div class="col-md-12 mb-3">
                <!-- Top-left position -->
                <a asp-action="Index" asp-controller="Pro" class="btn btn-secondary btn-sm">Back</a>
            </div>

            <!-- Product Image -->
            <div class="col-md-6">
                <img src="~/pictures/@Model.Picture" alt="Product Image" class="img-fluid">
            </div>

            <!-- Product Information -->
            <div class="col-md-6">
                <h2 class="mt-3">@Model.Name</h2>
                <h5 id="priceDisplay" class="text-muted"></h5>

                <div class="form-group">
                    <label for="combined-options">Select option:</label>
                    <div class="row">
                        @foreach (var option in ViewBag.Option)
                        {
                            <div class="col-md-4 mb-2">
                                <!-- 3 items per row -->
                                <div class="option-box text-center" data-type="combined" data-value="@option.Key" onclick="selectOption('combined', '@option.Key')">
                                    @Html.Raw(option.Key)
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <input id="CartOption" name="Option" value="" type="hidden" />
                <input type="hidden" value="@Model.Id" name="ProductId" />
                <input class="btn btn-danger btn-sm" type="submit" value="AddToCart" id="addToCartButton" disabled />
            </div>
        </div>
    </form>
</div>



<!-- Product Description -->
<div class="mt-4">
    <h3>Description</h3>
    <p>@Model.Description</p>
</div>

<!-- Product Rating -->
<div class="mt-4">
    <h3>Rating</h3>
    <span class="rating">&#9733;&#9733;&#9733;&#9733;&#9734;</span> <!-- Four filled stars and one empty star -->
    <span>(4/5)</span>
</div>

<!-- Comments Section -->
<div class="mt-4">
    <h3>Comments</h3>
    @if (User.Identity.IsAuthenticated)
    {
        <form class="input-group mb-3" asp-controller="Com" asp-action="AddComment" method="post">
            <textarea class="form-control" name="Comment" rows="3" placeholder="Leave a comment..." aria-label="Leave a comment" required></textarea>

            <!-- Hidden fields for proId and userId -->
            <input type="hidden" name="ProductId" value="@Model.Id">
            <input type="hidden" name="Username" value="@User.FindFirst("Username")?.Value"> <!-- Assuming user ID is in claims -->

            <div class="input-group-append">
                <button class="btn btn-primary" type="submit">Submit</button>
            </div>
        </form>
    }
    else
    {
        <p>Please <a asp-controller="Acc" asp-action="Login">log in</a> to submit a comment.</p>
    }
    <div class="mt-4">
        @if (ViewBag.Comments != null)
        {
            foreach (var comment in ViewBag.Comments)
            {

                <div class="comment" id="comment-@comment.Id">
                    <p><strong>@comment.FullName:</strong></p>

                    <!-- Comment text or textarea based on the edit mode -->
                    <div class="comment-content">
                        <span class="comment-text" id="comment-text-@comment.Id">@comment.Comment</span>
                        <textarea class="comment-edit" id="comment-edit-@comment.Id" style="display: none;">@comment.Comment</textarea>
                    </div>

                    <p><small>@comment.Date.ToString("g")</small></p>

                    <!-- Edit and Delete buttons only for the owner of the comment -->
                    @if (User.FindFirst("Username")?.Value == comment.UserName)
                    {
                        <div class="btn-group" role="group">
                            <button class="btn btn-warning btn-sm" onclick="editComment('@comment.Id')">Edit</button>
                            <button class="btn btn-danger btn-sm" onclick="deleteComment('@comment.Id')">Delete</button>
                        </div>
                        <button class="btn btn-success btn-sm" id="save-btn-@comment.Id" style="display: none;" onclick="saveComment('@comment.Id')">Save</button>
                    }
                    <hr />
                </div>
            }
        }
        else
        {
            <p>Be the first to comment</p>
        }
    </div>
</div>

<!-- Related Products Section -->
<!-- Related Products Section -->
<h3 class="mt-5">Related Products</h3>
<div class="row">
    <!-- Related Product 1 -->
    <div class="col-md-3 mb-4">
        <div class="related-product">
            <a asp-controller="Pro" asp-action="ProductDetail" asp-route-id="1"><img src="https://via.placeholder.com/150" class="img-fluid" alt="Related Product 1"></a>
            <h5>Related Product 1</h5>
            <p>$149.99</p>
            <button class="btn btn-success btn-sm">Add to Cart</button>
        </div>

    </div>
</div>

<!-- Related Product 2 -->
<div class="col-md-3 mb-4">
    <div class="related-product">
        <img src="https://via.placeholder.com/150" class="img-fluid" alt="Related Product 2">
        <h5>Related Product 2</h5>
        <p>$179.99</p>
        <button class="btn btn-success btn-sm">Add to Cart</button>
    </div>
</div>

<!-- Related Product 3 -->
<div class="col-md-3 mb-4">
    <div class="related-product">
        <img src="https://via.placeholder.com/150" class="img-fluid" alt="Related Product 3">
        <h5>Related Product 3</h5>
        <p>$129.99</p>
        <button class="btn btn-success btn-sm">Add to Cart</button>
    </div>
</div>

<!-- Related Product 4 -->
<div class="col-md-3 mb-4">
    <div class="related-product">
        <img src="https://via.placeholder.com/150" class="img-fluid" alt="Related Product 4">
        <h5>Related Product 4</h5>
        <p>$99.99</p>
        <button class="btn btn-success btn-sm">Add to Cart</button>
    </div>
</div>
</div>


<script>

    var selectedOption = '';

    function selectOption(type, value) {
        // Remove 'selected' class from the combined options
        document.querySelectorAll('.option-box[data-type="combined"]').forEach(function (el) {
            el.classList.remove('selected');
        });

        // Add 'selected' class to the clicked option
        document.querySelector(`.option-box[data-type="combined"][data-value="${value}"]`).classList.add('selected');

        // Set the selectedOption to the chosen RAM + Storage combination
        selectedOption = value;

        // Make an AJAX call to get the price if a valid option is selected
        if (selectedOption) {
            document.getElementById('CartOption').value = selectedOption; // Update a hidden input field with the selected option
            fetch(`/Pro/GetPrice?combinedOption=${encodeURIComponent(selectedOption)}&productId=@Model.Id`)
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                    if (data == 'Not available') {
                        document.getElementById('addToCartButton').disabled = true; // Disable the button
                    } else {
                        document.getElementById('addToCartButton').disabled = false; // Enable the button
                    }

                    const formattedPrice = parseFloat(data).toLocaleString('en-US') + ' VND';
                    document.getElementById('priceDisplay').textContent = formattedPrice;
                })
                .catch(error => {
                    console.error('Error fetching price:', error);
                    document.getElementById('priceDisplay').textContent = 'Error fetching price'; // Handle error
                    document.getElementById('addToCartButton').disabled = true; // Disable the button
                });
        }
    }

    function editComment(commentId) {
        // Hide the text and show the textarea
        document.getElementById(`comment-text-${commentId}`).style.display = 'none';
        document.getElementById(`comment-edit-${commentId}`).style.display = 'block';
        document.getElementById(`save-btn-${commentId}`).style.display = 'inline-block';
    }

    function saveComment(commentId) {
        // Get the updated comment text from the textarea
        const updatedComment = document.getElementById(`comment-edit-${commentId}`).value;

        // Perform an AJAX request to save the updated comment
        $.ajax({
            type: 'POST',
            url: '/Com/UpdateComment', // Replace with your update comment endpoint
            data: {
                id: commentId,
                comment: updatedComment
            },
            success: function () {
                // Update the comment text
                document.getElementById(`comment-text-${commentId}`).innerText = updatedComment;

                // Hide the textarea and show the updated text
                document.getElementById(`comment-text-${commentId}`).style.display = 'block';
                document.getElementById(`comment-edit-${commentId}`).style.display = 'none';
                document.getElementById(`save-btn-${commentId}`).style.display = 'none';
            },
            error: function () {
                alert('Error updating comment. Please try again.');
            }
        });
    }

    function deleteComment(commentId) {
        if (confirm('Are you sure you want to delete this comment?')) {
            // Perform AJAX request to delete the comment
            $.ajax({
                type: 'POST',
                url: '/Com/DeleteComment', // Replace with your delete comment endpoint
                data: { id: commentId },
                success: function () {
                    // Remove the comment element from the DOM
                    document.getElementById(`comment-${commentId}`).remove();
                },
                error: function () {
                    alert('Error deleting comment. Please try again.');
                }
            });
        }
    }

</script>


