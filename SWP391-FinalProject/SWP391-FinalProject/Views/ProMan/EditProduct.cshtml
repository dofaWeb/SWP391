@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    Layout = "_AdminLayout";
}
@using System.Security.Claims
<style>
    .container {
        margin-top: 20px;
    }

    .product-info {
        display: flex;
        margin-bottom: 30px;
        padding: 20px;
        border: 1px solid #ddd;
    }

        .product-info img {
            width: 60%;
            margin-right: 20px;
            border-right: 1px solid #ddd;
            padding-right: 20px;
        }

    .product-details {
        width: 40%;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-inline .form-control {
        width: auto;
    }

    .action-btns {
        display: flex;
        gap: 10px;
    }

    .table td,
    .table th {
        vertical-align: middle;
    }

    label {
        font-weight: bold;
    }

    /* Initially hide the Add and Edit Panels */
    #addPanel, #editPanel, #importPanel {
        display: none;
        border: 1px solid #ddd;
        padding: 20px;
        background-color: #f9f9f9;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 400px;
        z-index: 10;
    }

    /* Close button styling */
    .close-btn {
        float: right;
        cursor: pointer;
        font-size: 20px;
    }
</style>

<!-- Page Header -->
<header class="bg-dark text-white text-center py-4">
    <h1>Edit Product</h1>
</header>

<!-- Main Container -->
<div class="container">
    <!-- Product Information Section -->
    <div class="product-info">
        <!-- Left Side: Product Image -->
        <img src="~/pictures/@ViewBag.Product.Picture" alt="Product Image" class="img-fluid" />

        <!-- Right Side: Product Details -->
        <div class="product-details">
            <h3>Product Information</h3>
            <form id="productForm" asp-controller="ProMan" asp-action="EditProduct" method="post" enctype="multipart/form-data">
                <div class="form-group">
                    <label for="productID">Product ID:</label>
                    <input type="text" name="Id" class="form-control" id="productID" value="@ViewBag.Product.Id" readonly>
                </div>
                <div class="form-group">
                    <label for="productName">Product Name:</label>
                    <input type="text" name="Name" class="form-control" id="productName" value="@ViewBag.Product.Name">
                </div>

                <!-- Category Selection -->
                <div class="form-group">
                    <label for="category">Category:</label>
                    <select class="form-control" id="category" required onchange="updateSubcategory()">
                        @if (ViewBag.Product.CategoryId.StartsWith("B0"))
                        {
                            <option value="laptop" selected>Laptop</option>
                            <option value="phone">Smartphones</option>
                        }
                        else
                        {
                            <option value="laptop">Laptop</option>
                            <option value="phone" selected>Smartphones</option>
                        }
                    </select>
                </div>

                <!-- Subcategory Selection -->
                <div class="form-group">
                    <label for="subcategory">Subcategory:</label>
                    <select class="form-control" name="CategoryId" id="subcategory" required>
                        @if (ViewBag.Product.CategoryId.StartsWith("B0"))
                        {
                            @foreach (var item in ViewBag.Laptops)
                            {
                                @if (ViewBag.Product.CategoryId == item.Id)
                                {
                                    <option value="@item.Id" selected>@item.Name</option>
                                }
                                else
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            }
                        }
                        else
                        {
                            @foreach (var item in ViewBag.Smartphones)
                            {
                                @if (ViewBag.Product.CategoryId == item.Id)
                                {
                                    <option value="@item.Id" selected>@item.Name</option>
                                }
                                else
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            }
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label for="state">Product State:</label>
                    <select class="form-control" name="StateId" id="state">

                        @foreach (var item in ViewBag.ProductState)
                        {
                            if (item.Id != 3)
                            {
                                @if (ViewBag.Product.ProductState == item.Name)
                                {
                                    <option value="@item.Id" selected>@item.Name</option>
                                }
                                else
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            }
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label for="description">Description:</label>
                    <textarea class="form-control" name="Description" id="description" rows="4">@ViewBag.Product.Description</textarea>
                </div>

                <!-- Product Image Upload -->
                <div class="form-group">
                    <label for="productImage">Product Image:</label>
                    <input type="file" name="pictureUpload" class="form-control-file" id="productImage" accept="image/*">
                </div>

                <a asp-controller="ProMan" asp-action="Display" class="btn btn-danger">Cancel</a>
                <button type="submit" class="btn btn-primary">Save Changes</button>
            </form>
        </div>
    </div>

    <!-- Product Variations Section (below product information) -->
    <div class="right-side">
        <h3>Product Items</h3>

        <!-- Add Button -->
        @if (User.Identity.IsAuthenticated)
        {
            var roleClaim = User.FindFirst(ClaimTypes.Role);
            if (roleClaim.Value == "Role0001")
            {
                <button class="btn btn-success" id="addVariationBtn">Add Variation</button>
            }
        }
       
        @if (ViewBag.ProductItem.Count != 0)
        {
            <button class="btn btn-dark" id="importGoodsBtn">Import Goods</button>
        }
        <!-- Table for Product Variations (CRUD) -->
        <table class="table table-bordered mt-4">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Storage</th>
                    <th>RAM</th>
                    <th>Quantity</th>
                    <th>Import Price</th>
                    <th>Selling Price</th>
                    <th>Discount</th>
                    <th>Price after Discount</th>
                    <th>Profit/1 Product</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody id="variationTable">
                @foreach (var item in ViewBag.ProductItem)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Storage</td>
                        <td>@item.Ram</td>
                        <td>@item.Quantity</td>
                        <td>@string.Format("{0:N0}", @item.ImportPrice)</td>
                        <td>@string.Format("{0:N0}", @item.SellingPrice)</td>
                        <td>@string.Format("{0:0.##}%", @item.Discount)</td>
                        <td>@string.Format("{0:N0}", @item.PriceAfterDiscount)</td>
                        <td>@string.Format("{0:N0}", @item.Profit)</td>
                        <td>
                            <div class="action-btns">
                                <button class="btn btn-warning btn-sm editVariationBtn">Edit</button>
                                @if (User.Identity.IsAuthenticated)
                                {
                                    var roleClaim = User.FindFirst(ClaimTypes.Role);
                                    if (roleClaim.Value == "Role0001")
                                    {
                                        <a class="btn btn-danger btn-sm" asp-controller="ProMan" asp-action="DeleteProductItem" asp-route-id="@item.Id" asp-route-productId="@ViewBag.Product.Id" onclick="return deleteVariation()">Delete</a>

                                    }
                                }
                                
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Add Panels -->
<div id="addPanel">
    <span class="close-btn" onclick="closeAddPanel()">×</span>
    <h4>Add Variation</h4>
    <form asp-asp-controller="ProMan" asp-action="AddProItem" method="post" id="addForm">
        <!-- Storage Field with Listbox -->
        <div class="form-group form-inline">
            <label for="storage">Storage:</label>
            <select class="form-control ml-2" name="Storage">
                <option value="128GB" selected>128GB</option>
                <option value="256GB">256GB</option>
                <option value="512GB">512GB</option>
                <option value="1TB">1TB</option>
            </select>
        </div>

        <!-- RAM Field with Listbox -->
        <div class="form-group form-inline">
            <label for="ram">RAM:</label>
            <select class="form-control ml-2" name="Ram">
                <option value="4GB" selected>4GB</option>
                <option value="8GB">8GB</option>
                <option value="16GB">16GB</option>
                <option value="32GB">32GB</option>
            </select>
        </div>

        <!-- Quantity Input -->
        <div class="form-group form-inline">
            <label for="quantity">Quantity:</label>
            <input required type="number" name="Quantity" class="form-control ml-2" id="quantity" placeholder="Enter quantity" min="1" value="1">
        </div>

        <!-- Import Price Input -->
        <div class="form-group form-inline">
            <label for="importPrice">Import Price (VND):</label>
            <input required type="number" name="ImportPrice" class="form-control ml-2" id="importPrice" placeholder="Enter price" min="100000" step="100000">
        </div>

        <!-- Selling Price Input -->
        <div class="form-group form-inline">
            <label for="sellingPrice">Selling Price (VND):</label>
            <input type="number" name="SellingPrice" class="form-control ml-2" placeholder="Enter price" min="0" required step="100000" onforminput="100000">
        </div>
        <input type="hidden" name="ProductId" value="@ViewBag.Product.Id" />

        <input type="submit" class="btn btn-success" id="addVariation" value="Add" />
    </form>
</div>

<!--Edit panel-->
<div id="editPanel" class="container" style="display: none; max-width: 400px; padding: 20px; background-color: white; border-radius: 8px; box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h4 class="mb-0">Edit Variation</h4>
        <span class="close-btn" style="cursor: pointer; font-size: 24px;" onclick="closeEditPanel()">×</span>
    </div>

    <form asp-controller="ProMan" asp-action="EditProductItem" method="post" id="editForm">
        <!-- Selling Price Input -->
        <div class="form-group">
            <label for="sellingPrice" class="font-weight-bold">Selling Price (VND):</label>
            <input type="number" name="SellingPrice" class="form-control" id="sellingPrice" placeholder="Enter price" min="100000" step="100000">
        </div>

        <!-- Discount Input -->
        <div class="form-group">
            <label for="discount" class="font-weight-bold">Discount (%):</label>
            <input type="number" name="Discount" class="form-control" id="discount" placeholder="Enter discount" min="0" max="100" step="0.5">
        </div>

        <input type="hidden" name="Id" id="proItemId" />
        <input type="hidden" name="ProductId" value="@ViewBag.Product.Id" />

        <!-- Save Button -->
        <input type="submit" class="btn btn-success btn-block mt-4" value="Saves" />
    </form>
</div>

<!--Import panel-->
<div id="importPanel" class="container" style="display: none; max-width: 400px; padding: 20px; background-color: white; border-radius: 8px; box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h4 class="mb-0">Import Goods</h4>
        <span class="close-btn" style="cursor: pointer; font-size: 24px;" onclick="closeImportPanel()">×</span>
    </div>

    <form asp-controller="ProMan" asp-action="ImportProductItem" method="post" id="importForm">
        <div class="form-group form-inline">
            <label for="storage">ID:</label>
            <select class="form-control ml-2" name="VariationImport" id="VariationImport" onchange="UpdateVariation()" required>
                <option selected disabled>Select Product Item</option>
                @foreach (var item in ViewBag.ProductItem)
                {
                    <option value="@item.Id">@item.Id</option>
                }
            </select>
        </div>

        <!-- Fields to display Storage and RAM -->
        <div class="mt-3">

            <label for="Storage">Storage:</label>
            <input type="text" id="Storage" value="" class="form-control" readonly />

            <label for="Ram" class="mt-2">RAM:</label>
            <input type="text" id="Ram" value="" class="form-control" readonly />

        </div>

        <!-- Quantity Input -->
        <div class="form-group">
            <label for="sellingPriceImport" class="font-weight-bold">Quantity:</label>
            <input type="number" name="Quantity" class="form-control" id="QuantityImport"
                   placeholder="Enter quantity" min="1" step="1" required onchange="UpdateTotalPrice()">
        </div>

        <!-- Total Price-->
        <div class="form-group">
            <label for="discountImport" class="font-weight-bold">Total Price: (VND):</label>
            <input type="text" name="TotalPrice" class="form-control" id="TotalPrice"
                   value="" readonly>
        </div>

        <input type="hidden" name="ProductId" value="@ViewBag.Product.Id" />

        <!-- Save Button -->
        <input type="submit" class="btn btn-success btn-block mt-4" value="Save" onclick="return validateSelection()" />
    </form>
</div>

@if (User.Identity.IsAuthenticated)
{
    var roleClaim = User.FindFirst(ClaimTypes.Role);
    if (roleClaim.Value == "Role0001")
    {
        <script>
            document.getElementById("addVariationBtn").addEventListener("click", function () {
                document.getElementById("addPanel").style.display = "block";
            });
        </script>

    }
}


<!-- JavaScript for Add Panels -->
<script>
   

    document.getElementById("importGoodsBtn").addEventListener("click", function () {
        document.getElementById("importPanel").style.display = "block";
    });

    // Get all elements with the class "editVariationBtn"
    var editButtons = document.getElementsByClassName("editVariationBtn");

    // Loop through each button and add a click event listener
    for (var i = 0; i < editButtons.length; i++) {
        editButtons[i].addEventListener("click", function () {
            // Show the edit panel
            document.getElementById("editPanel").style.display = "block";

            // Get the current row that the clicked button belongs to
            var currentRow = this.closest('tr');

            var proItemId = currentRow.querySelector('td:nth-child(1)').innerText;
            // Get the values from the relevant cells
            var sellingPrice = currentRow.querySelector('td:nth-child(6)').innerText; // Selling price in the 6th column
            var discount = currentRow.querySelector('td:nth-child(7)').innerText;     // Discount in the 7th column

            // Fill the form with the extracted values
            document.getElementById("sellingPrice").value = sellingPrice.replace(/,/g, '').trim();
            document.getElementById("discount").value = discount.replace('%', '').trim();
            document.getElementById("proItemId").value = proItemId.trim();
        });
    }


    // Function to hide the edit panel (for closing)
    function closeEditPanel() {
        document.getElementById("editPanel").style.display = "none";
    }

    function closeAddPanel() {
        document.getElementById("addPanel").style.display = "none";
    }

    function closeImportPanel() {
        document.getElementById("importPanel").style.display = "none";
    }

    // JavaScript function to update subcategories based on selected category
    function updateSubcategory() {
        // Get selected category value
        var category = document.getElementById("category").value;
        var subcategory = document.getElementById("subcategory");

        // Clear previous options
        subcategory.innerHTML = "";

        // Check category and update the subcategory options accordingly
        if (category === "laptop") {
    @foreach (var laptop in ViewBag.Laptops)
    {
        <text>
                        var option = document.createElement("option");
                        option.value = "@laptop.Id";
                        option.text = "@laptop.Name";
                        subcategory.add(option);
        </text>
    }
                                            } else if (category === "phone") {
    @foreach (var phone in ViewBag.Smartphones)
    {
        <text>
                        var option = document.createElement("option");
                        option.value = "@phone.Id";
                        option.text = "@phone.Name";
                        subcategory.add(option);
        </text>
    }
                                            }
    }

    // Serialize the product items into JavaScript (ensure ViewBag.ProductItem is populated!)
    const productItems = @Html.Raw(Json.Serialize(ViewBag.ProductItem));
    let selectedItem;  // Make this a global variable to access in multiple functions

    console.log("Product Items:", productItems); // Log data for debugging

    function UpdateVariation() {
        const selectedId = document.getElementById("VariationImport").value.toLowerCase();
        console.log("Selected ID:", selectedId);

        selectedItem = productItems.find(
            item => item.id.toLowerCase() === selectedId
        );

        if (selectedItem) {
            console.log("Matching Item Found:", selectedItem);

            const storageValue = selectedItem.storage ? selectedItem.storage : "N/A";
            const ramValue = selectedItem.ram ? selectedItem.ram : "N/A";

            console.log("Storage:", storageValue, "RAM:", ramValue); // Debug log

            document.getElementById("Storage").value = storageValue;
            document.getElementById("Ram").value = ramValue;

            // Call UpdateTotalPrice to calculate initial total
            UpdateTotalPrice();
        } else {
            console.error("No matching product found! Product Items:", productItems);
        }
    }

    function UpdateTotalPrice() {
        const quantity = parseInt(document.getElementById("QuantityImport").value, 10);

        // Calculate totalPrice based on quantity and sellingPrice
        if (selectedItem && selectedItem.sellingPrice) {
            const totalPrice = quantity * selectedItem.sellingPrice;
            console.log("Total Price:", totalPrice); // Debug log

            // Update the TotalPrice field
            document.getElementById("TotalPrice").value = totalPrice.toLocaleString(); // Format with commas
        } else {
            document.getElementById("TotalPrice").value = "N/A";
        }
    }

    // Attach an event listener to the quantity field to trigger price update on change
    document.getElementById("QuantityImport").addEventListener("input", function () {
        UpdateTotalPrice();
    });

    function deleteVariation() {
        return confirm("Are you sure you want to delete this variation?");
    }

    // Function to format number as x.xxx.xxx (for VND currency)
    function formatVND(num) {
        return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
    }

    function validateSelection() {
        var variationSelect = document.getElementById("VariationImport");
        var selectedValue = variationSelect.value;

        if (!selectedValue || selectedValue === "Select Product Item") {
            alert("Please select a valid product item before saving.");
            return false; // Prevent form submission
        }

        return true; // Allow form submission
    }

</script>