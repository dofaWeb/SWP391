@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    Layout = "_AdminLayout";
}
@model IEnumerable<SWP391_FinalProject.Models.StatisticsModel>
<h2>Admin Dashboard</h2>

<!-- Year Dropdown Filter -->
<div class="form-group">
    <label for="yearSelect">Select Year:</label>
    <select class="form-control" id="yearSelect" style="width: 150px;">
        <option value="2024">2024</option>
        <option value="2023">2023</option>
        <option value="2022">2022</option>
        <option value="2021">2021</option>
    </select>
</div>

<!-- Filter for Chart -->
<div class="filters">
    <label><input type="checkbox" id="sellingPriceCheckbox" checked> Selling Price</label>
    <label><input type="checkbox" id="importPriceCheckbox" checked> Import Price</label>
    <label><input type="checkbox" id="profitCheckbox" checked> Profit</label>
</div>

<!-- Chart Container -->
<div class="chart-container">
    <canvas id="adminChart"></canvas>
</div>

<!-- Totals for each line with percentage comparison -->
<div class="totals">
    <div id="totalSellingPrice">Total Selling Price: $0 <span class="percentage" id="sellingPricePercentage"></span></div>
    <div id="totalImportPrice">Total Import Price: $0 <span class="percentage" id="importPricePercentage"></span></div>
    <div id="totalProfit">Total Profit: $0 <span class="percentage" id="profitPercentage"></span></div>
</div>

<!-- Chart.js Script to Render Chart -->
<script>
    // Setup chart context
    var ctx = document.getElementById('adminChart').getContext('2d');

    // Define datasets for each line (Selling Price, Import Price, Profit)
    var sellingPriceData = {
        label: 'Selling Price',
        data: [500, 700, 900, 800, 950, 1000],
        backgroundColor: 'rgba(255, 159, 64, 0.2)', // Updated color
        borderColor: 'rgba(255, 159, 64, 1)',
        borderWidth: 2,
        fill: false,
        pointRadius: 5,
        pointHoverRadius: 7
    };

    var importPriceData = {
        label: 'Import Price',
        data: [300, 400, 500, 450, 600, 700],
        backgroundColor: 'rgba(255, 99, 132, 0.2)',
        borderColor: 'rgba(255, 99, 132, 1)',
        borderWidth: 2,
        fill: false,
        pointRadius: 5,
        pointHoverRadius: 7
    };

    var profitData = {
        label: 'Profit',
        data: [200, 300, 400, 350, 350, 300],
        backgroundColor: 'rgba(75, 192, 192, 0.2)', // Updated color
        borderColor: 'rgba(75, 192, 192, 1)',
        borderWidth: 2,
        fill: false,
        pointRadius: 5,
        pointHoverRadius: 7
    };

    // Initialize chart
    var adminChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ['January', 'February', 'March', 'April', 'May', 'June'],
            datasets: [sellingPriceData, importPriceData, profitData] // multiple datasets for each line
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            },
            tooltips: {
                enabled: true, // Tooltips enabled by default
                mode: 'nearest',
                callbacks: {
                    label: function(tooltipItem, data) {
                        var dataset = data.datasets[tooltipItem.datasetIndex];
                        var value = dataset.data[tooltipItem.index];
                        return dataset.label + ': $' + value;
                    }
                }
            },
            hover: {
                mode: 'nearest',
                intersect: true
            }
        }
    });

    // Function to calculate total for a dataset
    function calculateTotal(dataArray) {
        return dataArray.reduce((total, num) => total + num, 0);
    }

    // Calculate percentage change
    function calculatePercentageChange(currentTotal, previousTotal) {
        if (previousTotal === 0) return 0; // Avoid division by zero
        return ((currentTotal - previousTotal) / previousTotal) * 100;
    }

    // Function to update totals and percentage change
    function updateTotals(previousData) {
        const totalSellingPrice = calculateTotal(sellingPriceData.data);
        const totalImportPrice = calculateTotal(importPriceData.data);
        const totalProfit = calculateTotal(profitData.data);

        const previousSellingPrice = calculateTotal(previousData.sellingPrice);
        const previousImportPrice = calculateTotal(previousData.importPrice);
        const previousProfit = calculateTotal(previousData.profit);

        document.getElementById('totalSellingPrice').innerText = 'Total Selling Price: $' + totalSellingPrice;
        document.getElementById('totalImportPrice').innerText = 'Total Import Price: $' + totalImportPrice;
        document.getElementById('totalProfit').innerText = 'Total Profit: $' + totalProfit;

        // Update percentage comparisons
        updatePercentage('sellingPricePercentage', totalSellingPrice, previousSellingPrice);
        updatePercentage('importPricePercentage', totalImportPrice, previousImportPrice);
        updatePercentage('profitPercentage', totalProfit, previousProfit);
    }

    // Helper function to update percentage with styling
    function updatePercentage(elementId, currentTotal, previousTotal) {
        const percentageChange = calculatePercentageChange(currentTotal, previousTotal);
        const percentageElement = document.getElementById(elementId);
        percentageElement.innerText = '(' + percentageChange.toFixed(2) + '%)';
        percentageElement.classList.remove('positive', 'negative');
        if (percentageChange >= 0) {
            percentageElement.classList.add('positive');
        } else {
            percentageElement.classList.add('negative');
        }
    }

    // Example of previous year data (for demo purposes)
    const previousYearData = {
        sellingPrice: [400, 600, 800, 750, 900, 950],
        importPrice: [250, 350, 450, 400, 550, 650],
        profit: [150, 250, 350, 350, 350, 300]
    };

    // Call updateTotals function to display totals and percentage change initially
    updateTotals(previousYearData);

    // Filter functionality: toggle visibility of each dataset
    document.getElementById('sellingPriceCheckbox').addEventListener('change', function() {
        adminChart.data.datasets[0].hidden = !this.checked;
        adminChart.update();
    });

    document.getElementById('importPriceCheckbox').addEventListener('change', function() {
        adminChart.data.datasets[1].hidden = !this.checked;
        adminChart.update();
    });

    document.getElementById('profitCheckbox').addEventListener('change', function() {
        adminChart.data.datasets[2].hidden = !this.checked;
        adminChart.update();
    });

    // Year dropdown change event
    document.getElementById('yearSelect').addEventListener('change', function() {
        const selectedYear = this.value;
        // Update the chart data according to the selected year (this part can be customized)
        console.log("Selected Year:", selectedYear);
        // For demonstration, keep the data the same, but you can replace it with actual data for different years.
    });
</script>