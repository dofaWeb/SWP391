@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    Layout = "_AdminLayout";
}

@model IEnumerable<SWP391_FinalProject.Models.StaffModel>

<style>

    .container {
        max-width: 1200px;
        margin: auto;
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 30px;
    }

    h1 {
        text-align: center;
        color: #333;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    th,
    td {
        border: 1px solid #ddd;
        text-align: center;
        padding: 10px;
    }

    th {
        background-color: #4CAF50;
        color: white;
    }

    tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    .add-staff {
        display: flex;
        justify-content: space-between;
        margin-top: 10px;
    }

        .add-staff input {
            width: 80%;
            padding: 10px;
            font-size: 16px;
            margin-right: 10px;
        }

        .add-staff button {
            width: 15%;
            padding: 10px;
            font-size: 16px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            .add-staff button:hover {
                background-color: #45a049;
            }

    .pay-section {
        display: flex;
        align-items: center;
        /* Center items vertically */
        justify-content: space-between;
        margin-top: 20px;
    }

        .pay-section label {
            margin-right: 10px;
            /* Add space between label and input */
        }

        .pay-section input {
            width: 60px;
            text-align: center;
            padding: 5px;
        }

        .pay-section button {
            padding: 10px 20px;
            font-size: 16px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            .pay-section button:hover {
                background-color: #45a049;
            }
</style>

<script>
    // Generate a list of future Mondays starting from 1st October 2024
    function generateMondayOptions() {
        const select = document.getElementById('monday-select');

        // Set the start date to 20th October 2024
        let startDate = new Date('2024-10-20');

        // Calculate the offset to the next Monday (or today if it's already a Monday)
        const dayOfWeek = startDate.getDay(); // Sunday = 0, Monday = 1, ..., Saturday = 6
        const mondayOffset = (dayOfWeek === 0) ? 1 : 8 - dayOfWeek; // Days to the next Monday

        // Move the start date to the closest Monday
        startDate.setDate(startDate.getDate() + mondayOffset);

        // Populate the select with the next 20 Mondays
        for (let i = 0; i < 20; i++) {
            const mondayDate = new Date(startDate);
            mondayDate.setDate(startDate.getDate() + i * 7);

            const option = document.createElement('option');
            option.value = mondayDate.toISOString().split('T')[0]; // Format: YYYY-MM-DD
            option.text = mondayDate.toDateString(); // Format: Day, Month Date, Year
            select.appendChild(option);
        }
    }

    // Update table dates based on the selected Monday
    function updateTableDates() {
        const selectedMonday = new Date(document.getElementById('monday-select').value);
        const tableHeaders = document.querySelectorAll('#schedule-table-value thead th');

        // Update table headers to display dates for the week (Monday to Friday)
        for (let i = 1; i <= 5; i++) {
            const currentDate = new Date(selectedMonday);
            currentDate.setDate(selectedMonday.getDate() + (i - 1));
            tableHeaders[i].textContent = currentDate.toDateString();
        }

        // Fetch shift data for the selected week
        fetch(`/StaffMan/GetShiftData?weekStartDate=${selectedMonday.toISOString().split('T')[0]}`)
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    const shifts = result.shifts; // Array of shift objects from the backend
                    const shiftCells = document.querySelectorAll('#schedule-table-value tbody select');
                    console.log('Fetched Shifts:', shifts); // Log fetched shifts for debugging

                    shiftCells.forEach((select, index) => {
                        // Calculate day index and ensure the first shift is Morning, second is Afternoon
                        const dayIndex = Math.floor(index / 2); // Two shifts per day (Morning, Afternoon)
                        const shiftDate = new Date(selectedMonday);
                        shiftDate.setDate(selectedMonday.getDate() + dayIndex);

                        // Determine shift type based on whether it's an even or odd index
                        const shiftType = (index % 2 === 0) ? 'Morning' : 'Afternoon';

                        // Clear previous options
                        select.innerHTML = '';

                        console.log('Shift Date:', shiftDate.toISOString().split('T')[0]);

                        // Corrected: Use `shift.date` instead of `shift.Date`
                        const matchingShifts = shifts.filter(shift => {
                            try {
                                const shiftDateStr = new Date(shift.date).toISOString().split('T')[0];
                                console.log('Comparing:', shiftDateStr, shiftDate.toISOString().split('T')[0]);
                                console.log('Comparing Shift Types:', shift.shift, shiftType);

                                return shiftDateStr === shiftDate.toISOString().split('T')[0] &&
                                    shift.shift === shiftType;
                            } catch (error) {
                                console.error('Error comparing shift dates:', error);
                                return false;
                            }
                        });

                        console.log('Matching Shifts:', matchingShifts);

                        // Populate select element with matching shift options
                        matchingShifts.forEach(shift => {
                            const option = document.createElement('option');
                            option.value = shift.shift;
                            option.textContent = shift.staffName;
                            select.appendChild(option);
                        });
                    });
                } else {
                    console.error('Failed to fetch shift data:', result.message);
                }
            })
            .catch(error => console.error('Error fetching shift data:', error));
    }


    // Calculate Total Weekly Pay
    function updateTotalWeeklyPay() {
        const hourlyRate = parseFloat(document.getElementById('hourly-rate').value) || 0;
        const totalHoursWorked = 40; // Assuming full-time 40 hours a week
        const totalPay = hourlyRate * totalHoursWorked;

        document.getElementById('total-weekly-pay').textContent = totalPay.toFixed(2);
    }

    // Initialize the page
    window.onload = function () {
        generateMondayOptions();
        updateTableDates();  // Automatically populate table on page load
    };
</script>
<!-- Schedule Management Section -->
<div style="margin-bottom:20px">
    <h1>Add Schedule</h1>

    <table id="add-shift">
        <thead>
            <tr>
                <th>Shift / Day</th>
                <th>Monday</th>
                <th>Tuesday</th>
                <th>Wednesday</th>
                <th>Thursday</th>
                <th>Friday</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Morning (7h - 12h)</td>
                @for (var i = 1; i <= 5; i++)
                {
                    <td>
                        <select>
                            <option default>Select the staff</option>
                            @foreach (var item in Model)
                            {
                                @if (item.Account.Status == "Available")
                                {
                                    <option>@item.Name</option>
                                }
                            }
                        </select>
                    </td>
                }
            </tr>
            <tr>
                <td>Afternoon (13h - 18h)</td>
                @for (var i = 1; i <= 5; i++)
                {
                    <td>
                        <select>
                            <option default>Select the staff</option>

                            @foreach (var item in Model)
                            {
                                @if (item.Account.Status == "Available")
                                {
                                    <option>@item.Name</option>
                                }
                            }
                        </select>
                    </td>
                }
            </tr>
        </tbody>
    </table>

    <!-- Pay Section -->
    <div class="pay-section">
        <div class="input-section">
            <label for="hourly-rate">Hourly Rate:</label>
            <input type="number" id="hourly-rate" value="30" oninput="updateTotalWeeklyPay()" />
            <span>Total Weekly Pay: $<span id="total-weekly-pay">1200.00</span></span>
        </div>

        <button class="btn btn-success" onclick="editCurrentWeek()">Edit</button>
        <button onclick="saveData()">Save</button>
    </div>
</div>
<div class="container">
    <h1>Staff Schedule Management</h1>
    <label for="monday-select">Select Start Date (Monday):</label>
    <select id="monday-select" onchange="updateTableDates()"></select>

    <table id="schedule-table-value">
        <thead>
            <tr>
                <th>Shift / Day</th>
                <th>Monday</th>
                <th>Tuesday</th>
                <th>Wednesday</th>
                <th>Thursday</th>
                <th>Friday</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Morning (7h - 12h)</td>
                @for (var i = 1; i <= 5; i++)
                {
                    <td>
                        <select>
                        </select>
                    </td>
                }
            </tr>
            <tr>
                <td>Afternoon (13h - 18h)</td>
                @for (var i = 1; i <= 5; i++)
                {
                    <td>
                        <select>
                        </select>
                    </td>
                }
            </tr>
        </tbody>
    </table>

</div>

<!-- Staff List Management Section -->
<div class="container">
    <h1>Staff List Management</h1>
    <form asp-controller="StaffMan" asp-action="CreateAccount" method="post">
        <input type="text" name="StaffEmail" placeholder="Enter Email" />
        <input type="submit" value="Add" class="btn btn-success" />
    </form>
    <table id="staff-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Total Hours Worked</th>
                <th>Total Pay ($)</th>
                <th>Total Orders</th>
                <th>Avg Orders per Shift</th>
                <th>Total Money Made</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.TotalHourWorked</td>
                    <td>@item.TotalPay</td>
                    <td>@item.TotalOrders</td>
                    <td>@item.AvgOrder</td>
                    <td>@item.TotalMoneyMade</td>
                    <td>@item.Account.Status</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script>
    function editCurrentWeek() {
        // Get the selected start date from the Monday select element
        const selectedMonday = new Date(document.getElementById('monday-select').value);
        const today = new Date();

        // Collect selected staff members for each shift
        const shifts = [];
        const shiftRows = document.querySelectorAll('#add-shift tbody tr');
        const hourlyRate = parseFloat(document.getElementById('hourly-rate').value) || 0;

        // First, collect all morning shifts (7h - 12h)
        const morningShiftCells = shiftRows[0].querySelectorAll('select');
        morningShiftCells.forEach((select, dayIndex) => {
            const selectedStaff = select.value;

            // Calculate the exact shift date based on the selected Monday
            const shiftDate = new Date(selectedMonday);
            shiftDate.setDate(selectedMonday.getDate() + dayIndex); // Day index is the offset from Monday

            shifts.push({
                staffId: selectedStaff,
                shift: 'Morning',
                date: shiftDate.toISOString().split('T')[0] // Format date to YYYY-MM-DD
            });
        });

        // Then, collect all afternoon shifts (13h - 18h)
        const afternoonShiftCells = shiftRows[1].querySelectorAll('select');
        afternoonShiftCells.forEach((select, dayIndex) => {
            const selectedStaff = select.value;

            // Calculate the exact shift date based on the selected Monday
            const shiftDate = new Date(selectedMonday);
            shiftDate.setDate(selectedMonday.getDate() + dayIndex); // Day index is the offset from Monday

            shifts.push({
                staffId: selectedStaff,
                shift: 'Afternoon',
                date: shiftDate.toISOString().split('T')[0] // Format date to YYYY-MM-DD
            });
        });

        const data = {
            shifts: shifts,
            hourlyRate: hourlyRate
        };

        // Send the data to the backend using AJAX
        fetch('/StaffMan/EditShiftDate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });
    }



    function saveData() {
        const selectedMonday = new Date(document.getElementById('monday-select').value);
        const today = new Date();

        // Check if the selected week is in the past
        if (selectedMonday < today) {
            alert('Cannot edit schedules for past weeks.');
            return; // Block saving for past weeks
        }

        const hourlyRate = parseFloat(document.getElementById('hourly-rate').value) || 0;

        // Collect selected staff members for each shift
        const shifts = [];
        const shiftCells = document.querySelectorAll('#add-shift tbody select');

        shiftCells.forEach((select, index) => {
            const selectedStaff = select.value;

            // Calculate the exact shift date
            const shiftDay = Math.floor(index / 2);
            const shiftDate = new Date(selectedMonday);
            shiftDate.setDate(selectedMonday.getDate() + shiftDay);

            const shiftType = (index % 2 === 0) ? 'Morning' : 'Afternoon';

            shifts.push({
                staffId: selectedStaff,
                shift: shiftType,
                date: shiftDate.toISOString().split('T')[0]
            });
        });

        const data = {
            hourlyRate: hourlyRate,
            shifts: shifts
        };

        // Send the data to the backend using AJAX
        fetch('/StaffMan/SaveShiftData', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    alert('Data has been saved successfully!');
                } else {
                    alert('Failed to save data: ' + result.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to save data due to a network error or server issue!');
            });
    }
</script>

